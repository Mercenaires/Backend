plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.asciidoctor.jvm.pdf' version '4.0.2'
    id 'jacoco'
    id 'org.sonarqube' version '3.5.0.2730'
}

group = 'org.example'
version = '1.0.0'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // Assurez-vous que cette ligne est présente
    implementation 'org.seleniumhq.selenium:selenium-java:4.10.0'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Générez le rapport Jacoco après les tests
    testLogging {
        events "PASSED", "FAILED", "SKIPPED" // Ajoutez des logs détaillés pour le suivi des tests
    }
}

jacocoTestReport {
    dependsOn test // Assurez-vous que les tests sont exécutés avant le rapport
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/config/**',  // Exclusion des classes spécifiques si nécessaire
                    '**/generated/**' // Ajustez selon votre structure
            ])
        }))
    }
}

asciidoctor {
    sourceDir = file('src/docs/asciidoc')
    outputDir = file("${buildDir}/docs")
    attributes(
            'build-gradle': file('build.gradle'),
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'source-highlighter': 'rouge',
            'rouge-style': 'github',
            'rouge-theme': 'github'
    )
}

tasks.asciidoctorPdf {
    sourceDir = file('src/docs/asciidoc')
    outputDir = file("${buildDir}/docs/pdf")
    dependsOn tasks.asciidoctor
}

tasks.build {
    dependsOn tasks.asciidoctor
    dependsOn tasks.asciidoctorPdf
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java', 'src/test/java/controllersT', 'src/test/java/servicesT']
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
        property "sonar.organization", "mercenaires"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN")
    }
}